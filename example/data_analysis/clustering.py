"""Plot feature distribution sorted by correlation with target."""
import matplotlib.pyplot as plt
from sklearn.cluster import (KMeans, AffinityPropagation, MeanShift,
                             AgglomerativeClustering)

from ase.ga.data import DataConnection
from atoml.data_setup import get_unique, get_train
from atoml.fingerprint_setup import return_fpv
from atoml.standard_fingerprint import StandardFingerprintGenerator
from atoml.particle_fingerprint import ParticleFingerprintGenerator
from atoml.feature_preprocess import standardize

# Connect database generated by a GA search.
db = DataConnection('../../data/gadb.db')

# Get all relaxed candidates from the db file.
print('Getting candidates from the database')
all_cand = db.get_all_relaxed_candidates(use_extinct=False)

# Setup the test and training datasets.
testset = get_unique(atoms=all_cand, size=5, key='raw_score')
trainset = get_train(atoms=all_cand, size=1000,
                     taken=testset['taken'], key='raw_score')

# Get the list of fingerprint vectors and normalize them.
print('Getting the fingerprint vectors')
sfpv = StandardFingerprintGenerator()
pfpv = ParticleFingerprintGenerator(get_nl=False, max_bonds=13)

train_data = return_fpv(trainset['atoms'], [pfpv.nearestneighbour_fpv,
                                            sfpv.eigenspectrum_fpv,
                                            sfpv.composition_fpv,
                                            sfpv.mass_fpv])
train_target = trainset['target']
mass = train_data[:, 0:1].reshape(len(train_data[:, 0:1]), )

# Scale and shape the data.
train_data = standardize(train_matrix=train_data)['train']

ap = AffinityPropagation().fit(train_data)
cn = max(ap.labels_)
km = KMeans(n_clusters=cn, random_state=0).fit(train_data)
ms = MeanShift().fit(train_data)
ac = AgglomerativeClustering(n_clusters=cn).fit(train_data)

# Plot the figure.
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(141)
ax.scatter(mass, train_target, c=ap.labels_, cmap=plt.cm.nipy_spectral)
ax = fig.add_subplot(142)
ax.scatter(mass, train_target, c=km.labels_, cmap=plt.cm.nipy_spectral)
ax = fig.add_subplot(143)
ax.scatter(mass, train_target, c=ms.labels_, cmap=plt.cm.nipy_spectral)
ax = fig.add_subplot(144)
ax.scatter(mass, train_target, c=ac.labels_, cmap=plt.cm.nipy_spectral)

plt.show()
