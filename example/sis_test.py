""" Script to test descriptors for the ML model. Takes a database of candidates
    from with target values set in atoms.info['key_value_pairs'][key] and
    returns the correlation of descriptors with target values.
"""
from __future__ import print_function

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

from ase.ga.data import DataConnection
from atoml.data_setup import get_unique, get_train
from atoml.fingerprint_setup import return_fpv, sure_independence_screening
from atoml.particle_fingerprint import ParticleFingerprintGenerator


# Connect database generated by a GA search.
db = DataConnection('gadb.db')

# Get all relaxed candidates from the db file.
print('Getting candidates from the database')
all_cand = db.get_all_relaxed_candidates(use_extinct=False)

# Setup the test and training datasets.
testset = get_unique(candidates=all_cand, testsize=500, key='raw_score')
trainset = get_train(candidates=all_cand, trainsize=500,
                     taken_cand=testset['taken'], key='raw_score')

# Get the list of fingerprint vectors and normalize them.
print('Getting the fingerprint vectors')
fpv = ParticleFingerprintGenerator(get_nl=False, max_bonds=13)
test_fp = return_fpv(testset['candidates'], [fpv.bond_count_fpv])
train_fp = return_fpv(trainset['candidates'], [fpv.bond_count_fpv])

# Get correlation for descriptors from SIS.
print('Getting descriptor correlation')
sis = sure_independence_screening(target=trainset['target'],
                                  train_fpv=train_fp, size=None)

# Plot the results.
index = [i for i in range(len(test_fp[0]))]
df = pd.DataFrame(data=sis, index=index)
with sns.axes_style("white"):
    sns.pointplot(x='sorted', y='correlation', data=df)
plt.show()
