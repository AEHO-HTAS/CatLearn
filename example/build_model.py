""" Script to test the ML model. Takes a database of candidates from a GA
    search with target values set in atoms.info['key_value_pairs'][key] and
    returns the errors for a random test and training dataset.
"""
from __future__ import print_function

import os

from ase.ga.data import DataConnection
from atoml.data_setup import get_unique, get_train
from atoml.fingerprint_setup import return_fpv
from atoml.particle_fingerprint import ParticleFingerprintGenerator
from atoml.model_build import ModelBuilder

# Decide whether to remove output and print graph.
cleanup = True

# Define starting guess for hyperparameters.
width = 0.5
reg = 0.001

# Connect database generated by a GA search.
db = DataConnection('gadb.db')

# Get all relaxed candidates from the db file.
print('Getting candidates from the database')
all_cand = db.get_all_relaxed_candidates(use_extinct=False)

# Setup the test and training datasets.
testset = get_unique(candidates=all_cand, testsize=5, key='raw_score')
trainset = get_train(candidates=all_cand, trainsize=10,
                     taken_cand=testset['taken'], key='raw_score')

# Get the list of fingerprint vectors and normalize them.
print('Getting the fingerprint vectors')
fpv = ParticleFingerprintGenerator(get_nl=False, max_bonds=13)


def fpvf(atoms):
    return return_fpv(atoms, [fpv.nearestneighbour_fpv])


mb = ModelBuilder(create_db=True, db_name='fpv_store.sqlite')
mb.from_atoms(train_atoms=trainset['candidates'],
              train_target=trainset['target'],
              fpv_function=fpvf, test_atoms=testset['candidates'],
              test_target=testset['target'], feature_names=None)

if cleanup:
    os.remove('train_fpv_store.sqlite')
    os.remove('test_fpv_store.sqlite')
    os.remove('ATOMLout.txt')
